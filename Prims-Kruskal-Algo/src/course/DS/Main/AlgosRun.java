package course.DS.Main;

import course.DS.Components.Edge;
import course.DS.Components.EdgeWeightedGraph;
import course.DS.Kruskal.KruskalAlgo;
import course.DS.Prims.PrimsAlgo;

/***
 * @author NIKHIL BHARADWAJ RAMESHA
 * AlgosRun Class - Main Class
 */

public class AlgosRun {
	
	/***
	 * Method to construct Graph for Kruskal's Algorithm Run
	 * @param ewG
	 */

	public static void consructKruskalGraph(EdgeWeightedGraph ewG)
	{
		for(int index=0;index<8;index++)
		{
			ewG.addVertices(index);
		}
		
		ewG.createGraph(0, 1, 8);
		ewG.createGraph(0, 5, 10);
		ewG.createGraph(0, 7, 5);
		ewG.createGraph(1, 2, 4);
		ewG.createGraph(1, 4, 4);
		ewG.createGraph(1, 5, 4);
		ewG.createGraph(1, 7, 4);
		ewG.createGraph(2, 3, 3);
		ewG.createGraph(2, 5, 3);
		ewG.createGraph(3, 4, 1);
		ewG.createGraph(3, 5, 6);
		ewG.createGraph(3, 6, 2);
		ewG.createGraph(4, 6, 3);
		ewG.createGraph(6, 7, 3);
	}
	
	/***
	 * Method to construct Graph for Prim's Algorithm run
	 * @param ewG
	 */
	
	public static void constructPrimsGraph(EdgeWeightedGraph ewG)
	{
		for(int index=0;index<8;index++)
		{
			ewG.addVertices(index);
		}
		
		ewG.createGraph(0, 1, 8);
		ewG.createGraph(0, 5, 10);
		ewG.createGraph(0, 7, 4);
		ewG.createGraph(1, 2, 4);
		ewG.createGraph(1, 4, 10);
		ewG.createGraph(1, 5, 7);
		ewG.createGraph(1, 7, 9);
		ewG.createGraph(2, 3, 3);
		ewG.createGraph(2, 5, 3);
		ewG.createGraph(3, 4, 25);
		ewG.createGraph(3, 5, 18);
		ewG.createGraph(3, 6, 2);
		ewG.createGraph(4, 5, 2);
		ewG.createGraph(4, 6, 7);
		ewG.createGraph(6, 7, 3);
	}
	
	/***
	 * Main Method
	 * @param args
	 */
	
	public static void main(String[] args) {
		
		System.out.println("Running Kruskal's Algorithm...\n");
		
		//Constructs Kruskal's Graph
		EdgeWeightedGraph ewG1 = new EdgeWeightedGraph();
		consructKruskalGraph(ewG1);
		
		//Runs Kruskal's Algorithm
		KruskalAlgo kAlgo = new KruskalAlgo(ewG1);
		kAlgo.runKruskal();
		
		//Print the Minimum Spanning Tree obtained from Kruskal's
		System.out.println("Printing the Spanning tree generated by Kruskal's..\n");
		for(Edge e : kAlgo.getSpanningTree())
		{
			System.out.print(e.getSource().getVertexVal()+"->"+e.getDestination().getVertexVal()+" (Weight:"+e.getWeight()+") :: ");
		}
		
		System.out.println("\n\nMinimum Weight of the Tree is: "+kAlgo.getSpanningTreeWeight());
		
		System.out.println("\n-----------------------------------------------------------------------------------------------------------------\n");
		
		System.out.println("Running Prim's Algorithm...\n");
		
		//Constructs Prim's Graph && builds adjacency List
		EdgeWeightedGraph ewG2 = new EdgeWeightedGraph();
		constructPrimsGraph(ewG2);
		ewG2.buildAdjacencyList();
		
		//Runs Prim's Algorithm
		PrimsAlgo pAlgo = new PrimsAlgo(ewG2);
		
		//Prints the Minimum Spanning Tree obtained from Prim's
		System.out.println("Printing the Spanning tree generated by Prim's..\n");
		for(Edge e : pAlgo.addToPrimsSpanningTree())
		{
			System.out.print(e.getSource().getVertexVal()+"->"+e.getDestination().getVertexVal()+" (Weight:"+e.getWeight()+") :: ");
		}
		
		System.out.println("\n\nMinimum Weight of the Tree is: "+pAlgo.getMinimumWeight());
	}

}
